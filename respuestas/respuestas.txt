1)¿Qué crítica le harías al protocolo de #estaHerido y #noEstaHerido? (en vez de tener solo el mensaje #estaHerido y hacer “#estaHerido not” para saber la negación)
Por un lado estamos teniendo dos mensajes con una implementación muy parecida, donde la única diferencia sería la negación entonces se podría resolver con un único mensaje. Pero también encontramos que era más sencillo de leer a veces la negación #noEstaHerido que #estaHerido. Tal vez sería mejor tener dos mensajes muy parecidos pero que el código sea más legible.
2)¿Qué opinan de que para algunas funcionalidades tenemos 3 tests para el mismo comportamiento pero aplicando a cada uno de los combatientes (Arthas, Mankrik y Olgra)
Si falla el test hace que sea mas identificable en qué objeto está fallando y además creemos que en los tests es necesario que se prueben cosas puntuales y fáciles de entender muchas veces.
3)¿Cómo modelaron el resultado de haber desarrollado un combate? ¿qué opciones consideraron y por qué se quedaron con la que entregaron y por qué descartaron a las otras?
El resultado del combate lo modelamos con el objeto ResultadoDelCombate. Consideramos tener dos colaboradores internos en el objeto OrquestadorDeCombates llamados "ganador" y "cantidadDeRondasDelCombate" y a partir de eso crear un mensaje llamado resultado que muestre esto enviando un bloque de código que imprimiera estos resultados. Al final, decidimos descartar esta opción porque el código en #desarrollarDuranteRondas: se estaba haciendo bastante ilegible.
El objeto ResultadoDelCombate tiene dos colaboradores internos donde guarda al ganador y a la cantidad de rondas en la que se desarrolló el combate, y también tiene dos mensajes donde muestra estos datos como resultado. La idea era que el OrquestadorDeCombates le diera esa información al resultado. También al usar el objeto el código queda más claro porque sólo tiene que pedirle al resultado que mustre esos datos.
